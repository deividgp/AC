#!/bin/sh
# *****************************************************************
# *                                                               *
# *    Copyright (c) Digital Equipment Corporation, 1991, 1999    *
# *                                                               *
# *   All Rights Reserved.  Unpublished rights  reserved  under   *
# *   the copyright laws of the United States.                    *
# *                                                               *
# *   The software contained on this media  is  proprietary  to   *
# *   and  embodies  the  confidential  technology  of  Digital   *
# *   Equipment Corporation.  Possession, use,  duplication  or   *
# *   dissemination of the software and media is authorized only  *
# *   pursuant to a valid written license from Digital Equipment  *
# *   Corporation.                                                *
# *                                                               *
# *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
# *   by the U.S. Government is subject to restrictions  as  set  *
# *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
# *   or  in  FAR 52.227-19, as applicable.                       *
# *                                                               *
# *****************************************************************
#	@(#)lint.sh	3.1	(ULTRIX/OSF)	2/26/91

LLDIR=/usr/ccs/lib	# location of lint executables
if [ "$COMP_HOST_ROOT" ] 
then
	CPPATH=$COMP_HOST_ROOT/usr/ccs/lib/cpp
    if [ -x $COMP_HOST_ROOT/usr/ccs/bin/cc ]
    then
       CCPATH=$COMP_HOST_ROOT/usr/ccs/bin/cc
    elif [ -x $COMP_HOST_ROOT/usr/ccs/lib/cc ]
    then
       CCPATH=$COMP_HOST_ROOT/usr/ccs/lib/cc
    else    
       CCPATH=$CPPATH
    fi
	LINT1=$COMP_HOST_ROOT/usr/ccs/lib/lint1
	LINT2=$COMP_HOST_ROOT/usr/ccs/lib/lint2
else
	LINT1=$LLDIR/lint1
	LINT2=$LLDIR/lint2
    CPPATH=/lib/cpp
	CCPATH=/usr/bin/cc
fi

LCPP=$CCPATH                # default cpreprocessor to DECC
TMP=/usr/tmp/tlint.$$		# preprocessor scratch file
TOUT=				# combined input for second pass
LIBA=$LLDIR/llib-lansi.ln	# standard ANSI library
LIBE=$LLDIR/llib-lc.ln		# default EXTD library
LIBS=$LLDIR/llib-lcstd.ln	# default std/std1 LIBRARY
POPT="-E -C -Dlint -DLINT -D__lint -D__LINT"	# options for the preprocessor
PONLY="-D__osf__ -D__alpha -DLANGUAGE_C -Dunix -D__LANGUAGE_C__" #preprocessor only options
ALPHAOPT=			# options for the migration 
ALPHAPRS=0			# Parse control flag for migration switches
L1OPT=				# options for the lint pass1 only
L2OPT=				# options for lint pass2 only
CFILES=				# the *.c files in order
LFILES=				# the *.ln files in order
LIBFILES=           # The *.ln library files
LLIB=				# lint library file to create
DEFDIR=				# Default output directory. (-d)
P1ONLY=				# Do lint1 and stop (-p1)
WARNS="-wA"			# lint warning level
CONLY=				# set for ``compile only''
MANSI=				# set if ANSI mode
STD=0               # STandard option. 0==default, 1= std1, 2 = std
LOOK=				# set for echo commands only
CPLUSSRC=			# For C++ sources
RC=0				# Value of 2 to signal failure of lint1
trap "rm -f $TMP $TOUT; exit 2" 1 2 3 15

for OPT in "$@"
do
	case "$OPT" in
	*.cxx)	CFILES="$CFILES $OPT";
            CPLUSSRC="-MC";
            TOUT=/usr/tmp/olint.$$;;	# combined input for second pass
	*.c)	CFILES="$CFILES $OPT";
            TOUT=/usr/tmp/olint.$$;;	# combined input for second pass
	*.i)	CFILES="$CFILES $OPT";
            TOUT=/usr/tmp/olint.$$;;	# combined input for second pass
	*.ln)	LFILES="$LFILES $OPT";;
	-*)     OPT=`echo X$OPT | sed s/X-//`
		while [ "$OPT" ]
		do
			O=`echo $OPT | sed 's/\\(.\\).*/\\1/'`	# option letter
			OPT=`echo $OPT | sed s/.//`	# option argument
			case $O in
			\#)	LOOK=1;;		# echo commands only
            1)  P1ONLY=1;;      # suppress pass 2
			c)	if [ "$OPT" = "pp" ]
                then
                    LCPP=$CPPATH                # Use cc as the preprocessor
                else
                    CONLY=1	                    # lint1 only, make .ln  files
                fi
                break;;
			p)	L2OPT="$L2OPT -$O";
				LIBE="$LLDIR/llib-port.ln";;	# extreme portability
			n)	LIBA=				# no libraries
                LIBS=
				LIBE=;;
            s)  case "$OPT" in
                   td)  STD=2;;
                   td0) STD=0;;
                   td1) STD=1;;
			       *) dspmsg ctools.cat 402 "lint: bad option ignored: %s\n" $O$OPT;;
			    esac
                break;;
			v)	L1OPT="$L1OPT -v";;	# parameter usage check
			a)	WARNS="${WARNS}l";;     # warning message options

			w)	WARNS="$WARNS$OPT"      # warning message options
				break;;
			b)	WARNS="${WARNS}R";;    # warning message options
			u)	WARNS="${WARNS}U";;    # warning message options
			h)	WARNS="$WARNS$O";;     # warning message options
			x)	WARNS="${WARNS}D";;    # warning message options
			Q)	ALPHAOPT="-Q$OPT"      # Alpha migration switch
				break;;

			N)	L1OPT="$L1OPT -$O$OPT"	# valid cc(1) options
				break;;
			X)	L1OPT="$L1OPT -$O$OPT"	# X<args> in L1
				if [ "$OPT" = "dollar" ]
				then
					L2OPT="$L2OPT -$O$OPT"	# X only in L2
				else
					L2OPT="$L2OPT -$O"	# X only in L2
				fi
				break;;
			M)	if [ "$OPT" = "C" ]
                then
                        CPLUSSRC="-MC"
                else
                        L1OPT="$L1OPT -$O$OPT"	# valid cc(1) options
                        L2OPT="$L2OPT -$O$OPT"
                        MANSI=1
               fi
			   break;;
			l)	if [ "$OPT" ]	# include a lint library
				then
				    if [ "$OPT" = "curses" ]
				    then
					    LIBFILES="$LLDIR/llib-lcrses.ln $LIBFILES"
				    else
					    LIBFILES="$LLDIR/llib-l$OPT.ln $LIBFILES"
				    fi
				else
					dspmsg ctools.cat 401 "improper usage of option: %s\n" $O
				fi
				break;;
			o)	if [ "$OPT" ]		# make a lint library
				then
					OPT=`basename $OPT`
					LLIB="llib-l$OPT.ln"
				else
					dspmsg ctools.cat 401 "improper usage of option: %s\n" $O
				fi
				break;;
			d)	if [ "$OPT" ]		# Output libraries to other directory
				then
					DEFDIR=$OPT/
				else
					dspmsg ctools.cat 401 "improper usage of option: %s\n" $O
				fi
				break;;
			[DU])	if [ "$OPT" ]		# preprocessor options
				then
					POPT="$POPT -$O$OPT"
				else
					dspmsg ctools.cat 401 "improper usage of option: %s\n" $O
				fi
				break;;

			I)	POPT="$POPT -$O$OPT"
				break;;

			P)	POPT="$POPT -$OPT"
				break;;

			*)	dspmsg ctools.cat 402 "lint: bad option ignored: %s\n" $O;;
			esac
		done;;
	*)	if [ "$OPT" ]
		then
			dspmsg ctools.cat 403 "lint: file with unknown suffix ignored: %s\n" $OPT
		fi
	esac
done
if [ "$CFILES" = "" ] && [ "$LFILES" = "" ] 
then
	dspmsg ctools.cat 404 "usage: lint [options] file ...\n"
	exit 2	
fi

if [ "$CPLUSSRC" ]
then
        POPT="$POPT -D__cplusplus"
		L1OPT="$L1OPT $CPLUSSRC"	
        STD=1
fi

if [ "$MANSI"  ]
then
	LIBFILES="$LIBA $LIBFILES"		# standard ANSI library
    POPT="-D_ANSI_C_SOURCE -std1 $POPT"
else 
     case "$STD" in
          0) LIBFILES="$LIBFILES $LIBE"		# standard EXTD library
             POPT="$POPT -std0";;

          1) LIBFILES="$LIBFILES $LIBS"
             POPT="$POPT -std1"
			 L1OPT="$L1OPT -MA"	
			 L2OPT="$L2OPT -MA";;

          2) LIBFILES="$LIBFILES $LIBS"
			 L1OPT="$L1OPT -MABr"	
			 L2OPT="$L2OPT -MABr" 
             POPT="$POPT -std";;
          *) 	dspmsg ctools.cat 404 "usage: lint [options] file ...\n"
                exit 2;;	
     esac
fi

if [ "$CONLY" ]		# run lint1 on *.c's only producing *.ln's
then
	for i in $CFILES
	do
		case "$i" in
			*.i) IFILE=1		# TRUE, skip CFE
			     T=`basename $i .i`.ln;;
			*.c) IFILE=		# FALSE, preprocess
			     T=`basename $i .c`.ln;;

		esac
		rm -f $TMP $DEFDIR$T
		if [ "$LOOK" ]
		then	
			if [ "$IFILE" ]
			then
				echo "$LINT1 $WARNS $ALPHAOPT $L1OPT $i -L$DEFDIR$T ) 2>&1"
			else
				echo "( $LCPP $POPT $PONLY $i > $TMP"
				echo "$LINT1 $WARNS $ALPHAOPT $L1OPT $TMP -L$DEFDIR$T ) 2>&1"
			fi
		else
			if [ "$IFILE" ]
			then
				$LINT1 $WARNS $ALPHAOPT $L1OPT $i -L$DEFDIR$T 2>&1
			else
				( $LCPP $POPT  $PONLY $i > $TMP
				$LINT1 $WARNS $ALPHAOPT $L1OPT $TMP -L$DEFDIR$T ) 2>&1
			fi
		fi
	done
else			# send all *.c's through lint1 run all through lint2
	if [ "$CFILES" ]
	then
		rm -f $TOUT; touch $TOUT
	fi
	for i in $CFILES
	do
		if [ $RC -eq 2 ]
		then
			rm -f $TMP $TOUT;
			exit $RC;
		fi
		rm -f $TMP

		case "$i" in

			*.i) IFILE=1;;		# TRUE, skip CFE
			*)   IFILE=;;		# FALSE, preprocess
		esac
		if [ "$LOOK" ]
		then	
			if [ "$IFILE" ]
			then
				echo "$LINT1 $WARNS $ALPHAOPT $L1OPT $i -L$TOUT ) 2>&1"
			else
				echo "( $LCPP $POPT  $PONLY $i > $TMP"
				echo "$LINT1 $WARNS $ALPHAOPT $L1OPT $TMP -L$TOUT ) 2>&1"
			fi
		else
			if [ "$IFILE" ]
			then
				$LINT1 $WARNS $L1OPT $ALPHAOPT $i -L$TOUT 2>&1
			else
				( $LCPP $POPT  $PONLY $i > $TMP
				$LINT1 $WARNS $L1OPT $ALPHAOPT $TMP -L$TOUT ) 2>&1
			fi
			RC=$?
		fi
	done

	if [ ! $RC -eq 2 ]	# 2 means lint1 failed without recovering
	then
        if [ "$P1ONLY" = "" ] #If P1ONLY flag is set, bypass pass 2
        then
        		if [ "$LOOK" ]
                then	
                        echo "$LINT2 $WARNS $ALPHAOPT $L2OPT $TOUT $LFILES $LIBFILES"
                else
                   		$LINT2 $WARNS $ALPHAOPT $L2OPT $TOUT $LFILES $LIBFILES
                fi
        fi
		if [ "$LLIB" ]	# make a library of lint1 results
		then
        		if [ "$LOOK" ]
                then	
                    echo "cat $TOUT $LFILES > $DEFDIR$LLIB"
                else
                    cat $TOUT $LFILES > $DEFDIR$LLIB
                fi
		fi
	else
		rm -f $TMP $TOUT;
		exit $RC;
	fi
fi
rm -f $TMP $TOUT





